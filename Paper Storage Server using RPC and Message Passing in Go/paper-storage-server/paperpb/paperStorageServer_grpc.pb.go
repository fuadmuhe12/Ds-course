// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/paperStorageServer.proto

package paperpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaperStorageService_AddPaper_FullMethodName          = "/paper_storage_server.PaperStorageService/AddPaper"
	PaperStorageService_ListPapers_FullMethodName        = "/paper_storage_server.PaperStorageService/ListPapers"
	PaperStorageService_GetPaperDetails_FullMethodName   = "/paper_storage_server.PaperStorageService/GetPaperDetails"
	PaperStorageService_FetchPaperContent_FullMethodName = "/paper_storage_server.PaperStorageService/FetchPaperContent"
)

// PaperStorageServiceClient is the client API for PaperStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaperStorageServiceClient interface {
	AddPaper(ctx context.Context, in *AddPaperArgs, opts ...grpc.CallOption) (*AddPaperResponse, error)
	ListPapers(ctx context.Context, in *ListPapersArgs, opts ...grpc.CallOption) (*ListPapersResponse, error)
	GetPaperDetails(ctx context.Context, in *GetPaperDetailsArgs, opts ...grpc.CallOption) (*GetPaperDetailsResponse, error)
	FetchPaperContent(ctx context.Context, in *FetchPaperContentArgs, opts ...grpc.CallOption) (*FetchPaperContentResponse, error)
}

type paperStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaperStorageServiceClient(cc grpc.ClientConnInterface) PaperStorageServiceClient {
	return &paperStorageServiceClient{cc}
}

func (c *paperStorageServiceClient) AddPaper(ctx context.Context, in *AddPaperArgs, opts ...grpc.CallOption) (*AddPaperResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPaperResponse)
	err := c.cc.Invoke(ctx, PaperStorageService_AddPaper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperStorageServiceClient) ListPapers(ctx context.Context, in *ListPapersArgs, opts ...grpc.CallOption) (*ListPapersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPapersResponse)
	err := c.cc.Invoke(ctx, PaperStorageService_ListPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperStorageServiceClient) GetPaperDetails(ctx context.Context, in *GetPaperDetailsArgs, opts ...grpc.CallOption) (*GetPaperDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaperDetailsResponse)
	err := c.cc.Invoke(ctx, PaperStorageService_GetPaperDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperStorageServiceClient) FetchPaperContent(ctx context.Context, in *FetchPaperContentArgs, opts ...grpc.CallOption) (*FetchPaperContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchPaperContentResponse)
	err := c.cc.Invoke(ctx, PaperStorageService_FetchPaperContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaperStorageServiceServer is the server API for PaperStorageService service.
// All implementations must embed UnimplementedPaperStorageServiceServer
// for forward compatibility.
type PaperStorageServiceServer interface {
	AddPaper(context.Context, *AddPaperArgs) (*AddPaperResponse, error)
	ListPapers(context.Context, *ListPapersArgs) (*ListPapersResponse, error)
	GetPaperDetails(context.Context, *GetPaperDetailsArgs) (*GetPaperDetailsResponse, error)
	FetchPaperContent(context.Context, *FetchPaperContentArgs) (*FetchPaperContentResponse, error)
	mustEmbedUnimplementedPaperStorageServiceServer()
}

// UnimplementedPaperStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaperStorageServiceServer struct{}

func (UnimplementedPaperStorageServiceServer) AddPaper(context.Context, *AddPaperArgs) (*AddPaperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaper not implemented")
}
func (UnimplementedPaperStorageServiceServer) ListPapers(context.Context, *ListPapersArgs) (*ListPapersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPapers not implemented")
}
func (UnimplementedPaperStorageServiceServer) GetPaperDetails(context.Context, *GetPaperDetailsArgs) (*GetPaperDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaperDetails not implemented")
}
func (UnimplementedPaperStorageServiceServer) FetchPaperContent(context.Context, *FetchPaperContentArgs) (*FetchPaperContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPaperContent not implemented")
}
func (UnimplementedPaperStorageServiceServer) mustEmbedUnimplementedPaperStorageServiceServer() {}
func (UnimplementedPaperStorageServiceServer) testEmbeddedByValue()                             {}

// UnsafePaperStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaperStorageServiceServer will
// result in compilation errors.
type UnsafePaperStorageServiceServer interface {
	mustEmbedUnimplementedPaperStorageServiceServer()
}

func RegisterPaperStorageServiceServer(s grpc.ServiceRegistrar, srv PaperStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaperStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaperStorageService_ServiceDesc, srv)
}

func _PaperStorageService_AddPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaperArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperStorageServiceServer).AddPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperStorageService_AddPaper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperStorageServiceServer).AddPaper(ctx, req.(*AddPaperArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperStorageService_ListPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPapersArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperStorageServiceServer).ListPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperStorageService_ListPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperStorageServiceServer).ListPapers(ctx, req.(*ListPapersArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperStorageService_GetPaperDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaperDetailsArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperStorageServiceServer).GetPaperDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperStorageService_GetPaperDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperStorageServiceServer).GetPaperDetails(ctx, req.(*GetPaperDetailsArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaperStorageService_FetchPaperContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPaperContentArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperStorageServiceServer).FetchPaperContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaperStorageService_FetchPaperContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperStorageServiceServer).FetchPaperContent(ctx, req.(*FetchPaperContentArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// PaperStorageService_ServiceDesc is the grpc.ServiceDesc for PaperStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaperStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paper_storage_server.PaperStorageService",
	HandlerType: (*PaperStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPaper",
			Handler:    _PaperStorageService_AddPaper_Handler,
		},
		{
			MethodName: "ListPapers",
			Handler:    _PaperStorageService_ListPapers_Handler,
		},
		{
			MethodName: "GetPaperDetails",
			Handler:    _PaperStorageService_GetPaperDetails_Handler,
		},
		{
			MethodName: "FetchPaperContent",
			Handler:    _PaperStorageService_FetchPaperContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/paperStorageServer.proto",
}
